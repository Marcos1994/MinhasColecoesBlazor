@page "/login"
@using MinhasColecoes.Shared.InputModels;
@using MinhasColecoes.Shared.InputModels.ErrorModel;
@using MinhasColecoes.Shared.ViewModels;
@inject NavigationManager navManager
@inject UsuarioAPI usuarioApi

<div class="login-form">
	<h1 class="title-gradient">Login</h1>
	<div class="container">
		<ValidationError @ref="validationError" />
		<div class="form-floating mb-3">
			<input class="form-control" aria-describedby="emailHelp" @bind="usuarioIM.Login" autofocus />
			<label>E-mail: </label>
		</div>
		<div class="form-floating mb-3">
			<input class="form-control" type="password" @bind="usuarioIM.Senha" />
			<label>Senha: </label>
		</div>
		<div class="text-center">
			<button class="btn btn-lg btn-primary" @onclick="Logar">Confirmar</button>
		</div>
	</div>
</div>

@code {
	private UsuarioLoginIM usuarioIM = new UsuarioLoginIM();
	ValidationError validationError;

	private async Task Logar()
	{
		HttpResponseMessage response = await usuarioApi.Login(usuarioIM);

		if (response.IsSuccessStatusCode)
		{
			await usuarioApi.SetToken(await response.Content.ReadFromJsonAsync<UsuarioLoginVM>());
			navManager.NavigateTo("/perfil", true);
		}
		else
		{
			if (response.StatusCode == HttpStatusCode.NotFound)
				validationError.SetMessage("Combinação de Login e Senha não encontrada.");
			else if (response.StatusCode == HttpStatusCode.BadRequest)
			{
				ResponseError<UsuarioLoginEM> error = await response.Content.ReadFromJsonAsync<ResponseError<UsuarioLoginEM>>();
				validationError.SetValidationErrors(error.Errors.GetErrors());
			}
		}
	}
}
