@page "/novacolecao"
@using MinhasColecoes.Shared.InputModels
@using MinhasColecoes.Shared.InputModels.ErrorModel;
@inject ColecaoApiService colecaoService
@inject NavigationManager navManager

<div class="row">
	<div class="col-12 col-md-6 col-lg-4 mb-3 mb-md-0">
		<h1>Cadastrar Coleção</h1>
		<ImageUploader @ref="uploader" Categoria="EnumCategoriasFotos.Colecao" />
		<ValidationError @ref="validationError" />
		<div class="form-floating mb-3">
			<input class="form-control" @bind="colecao.Nome" autofocus />
			<label>Nome: </label>
		</div>
		<div class="form-floating mb-3">
			<textarea class="form-control" @bind="colecao.Descricao" />
			<label>Descrição: </label>
		</div>
		<div class="form-check mb-3">
			<input class="form-check-input" type="checkbox" @bind="colecao.Publica">
			<label class="form-check-label" for="flexCheckChecked">
				Coleção Publica
			</label>
		</div>
		<div class="text-center">
			<button class="btn btn-lg btn-primary" @onclick="Confirmar">Confirmar</button>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public string Nome { get; set; } = string.Empty;

	private ValidationError validationError;
	private ImageUploader uploader;
	private ColecaoIM colecao;

	protected override void OnInitialized()
	{
		colecao = new ColecaoIM() { Nome = Nome };
	}

	private async Task Confirmar()
	{
		try
		{
			colecao.Foto = await uploader.UploadFile();
			int idColecao = (await colecaoService.Create(colecao)).Id;
			navManager.NavigateTo($"/colecao/{idColecao}");
		}
		catch (HttpResponseException ex)
		{
			HttpResponseMessage response = ex.Response;

			if (response.StatusCode == HttpStatusCode.BadRequest)
			{
				ResponseError<ColecaoEM> error = await response.Content.ReadFromJsonAsync<ResponseError<ColecaoEM>>();
				validationError.SetValidationErrors(error.Errors.GetErrors());
			}
			else
			{
				validationError.SetMessage(response.StatusCode.ToString());
			}
		}
		catch (Exception ex)
		{
			validationError.SetMessage(ex.Message);
		}
	}
}
