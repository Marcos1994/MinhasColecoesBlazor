@inject ItemApiService itemService
@inject NavigationManager navManager

<div class="row mb-3">
	<div class="col-12 col-xl-5 mb-2 mb-xl-0">
		<div class="row">
			<div class="col">
				<SearchAndCreateBar Mensagem="@mensagemParametro" OnClickBuscarCallback="BuscarItens" OnClickCadastrarCallback="Cadastrar" />
			</div>
			<div class="col-auto">
				<a class="btn btn-secondary" href="/colecao/@(IdColecao)/cadastrarmultiplositens">Cadastrar Vários</a>
			</div>
		</div>
	</div>
	<div class="col-12 col-xl-7">
		<div class="d-flex flex-row-reverse justify-content-center justify-content-lg-start">
			<div class="col-auto">
				<GerenciadorDeColunas QuantidadeDeColunas="QuantidadeDeColunas"
									  QuantidadeMaximaDeColunas="QuantidadeMaximaDeColunas"
									  OnChangeDistribuicaoCallback="AjustarColunas"
									  OnChangeQuantidadeCallback="AjustarTamanhoDosItens" />
			</div>
			<form class="d-inline-block mx-3">
				<select class="form-select form-select-sm" value="@(quantidadePorPagina)" @onchange="SetQuantidadePorPagina">
					@for (int i = 20; i <= 300; i *= 2)
					{
						<option value="@i">@i por página</option>
					}
				</select>
			</form>
			@if (totalPaginas > 1)
			{
				<nav class="d-inline-block">
					<Paginacao TotalPaginas="totalPaginas" PaginaAtual="paginaAtual" OnClickCallback="SetPaginaAtual" />
				</nav>
			}
		</div>
	</div>
</div>

@if (itens == null)
{
	if (status == null)
	{
		<h3>Carregando...</h3>
	}
	else
	{
		@(status.ToString())
	}
}
else
{
	<div class="row @(distribuicaoDasColunas) g-3">
		@foreach (ItemBasicVM i in itensPaginados)
		{
			<CardItem Item="i" TamanhoDaImagem="tamanhoDosCards" OnSelectCallback="AtualizarRelacionamentoItem" Editavel="true" />
		}
	</div>
}

@if (totalPaginas > 1)
{
	<div class="row my-3">
		<div class="col-12 d-flex justify-content-center">
			<nav class="d-inline-block">
				<Paginacao TotalPaginas="totalPaginas" PaginaAtual="paginaAtual" OnClickCallback="SetPaginaAtual" />
			</nav>
		</div>
	</div>
}

@code {
	[Parameter]
	public int IdColecao { get; set; }

	[Parameter]
	public int QuantidadeDeColunas { get; set; } = 5;

	[Parameter]
	public int QuantidadeMaximaDeColunas { get; set; } = 6;

	private string distribuicaoDasColunas = "row-cols-1";
	private int tamanhoDosCards = 200;

	private List<ItemBasicVM> itens;
	private List<ItemBasicVM> itensPaginados;
	private HttpStatusCode? status;
	private int totalPaginas = 0;
	private int paginaAtual = 0;
	private int quantidadePorPagina = 20;
	private string mensagemParametro = "Nome do item";

	protected override async Task OnParametersSetAsync()
	{
		itens = null;
		await BuscarItens();
	}

	protected void SetQuantidadePorPagina(ChangeEventArgs e)
	{
		quantidadePorPagina = 20;
		Int32.TryParse(e.Value.ToString(), out quantidadePorPagina);
		Paginar();
	}

	private void SetPaginaAtual(int paginaAtual)
	{
		this.paginaAtual = paginaAtual;
		itensPaginados = itens
		.Skip(quantidadePorPagina * (paginaAtual - 1))
		.Take(quantidadePorPagina).ToList();
	}

	private void AjustarColunas(string distribuicaoDasColunas)
	{
		this.distribuicaoDasColunas = distribuicaoDasColunas;
	}

	private void AjustarTamanhoDosItens(int quantidadeColunas)
	{
		tamanhoDosCards = 200 * (4 + QuantidadeMaximaDeColunas - quantidadeColunas) / 4;
	}

	private async Task BuscarItens(string nome = "")
	{
		try
		{
			itens = await itemService.GetByNome(IdColecao, nome);
			Paginar();
		}
		catch (HttpResponseException ex)
		{
			status = ex.Response.StatusCode;
		}
	}

	private void Paginar()
	{
		totalPaginas = Convert.ToInt32(Math.Ceiling((double)itens.Count() / quantidadePorPagina));
		SetPaginaAtual(1);
	}

	private async Task AtualizarRelacionamentoItem(ItemBasicVM item)
	{
		try
		{
			await itemService.AtualizarRelacionamento(item);
		}
		catch (HttpResponseException ex)
		{
			status = ex.Response.StatusCode;
		}
	}

	private void Cadastrar()
	{

	}

	private void NavegarPara(ColecaoBasicVM colecao)
	{

	}
}
