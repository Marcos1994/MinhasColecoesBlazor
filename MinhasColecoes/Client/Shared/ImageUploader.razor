@using System.IO
@using Tewr.Blazor.FileReader
@using MinhasColecoes.Client.Models
@inject IFileReaderService fileReader
@inject FileUploadApiService uploader


<div class="row mb-3" style="height: 200px;">
	@if (imagem.Preview != string.Empty)
	{
		<div class="row" style="height: 200px;">
			<div class="d-block" style="height: 200px;">
				<img class="mx-auto d-block" style="max-width: 100%; max-height: 100%;" src="@imagem.Preview" />
			</div>
		</div>
	}
</div>
<div class="row mb-3">
	<div class="form-group">
		<input type="file" @ref="inputFile" @onchange="async () => await OpenFile()" accept="image/*" />
	</div>
</div>
@if (!string.IsNullOrEmpty(mensagem))
{
	<div class="row mb-3">
		@if (mensagemErro)
		{
			<div class="alert alert-danger">
				@mensagem
			</div>
		}
		else
		{
			<div class="alert alert-success">
				@mensagem
			</div>
		}
	</div>
}

@code {
	[Parameter]
	public EnumCategoriasFotos Categoria { get; set; }

	[Parameter]
	public string Url { get; set; } = string.Empty;

	ElementReference inputFile;
	ImageUploaderModel imagem;
	bool mensagemErro = false;
	string mensagem = string.Empty;

	protected override void OnInitialized()
	{
		imagem = new ImageUploaderModel(Categoria, uploader.GetBaseUrl());
		if (Url != string.Empty)
			imagem.SetUrl(Url);
	}

	private void SetMensagem(string mensagem, bool mensagemErro = false)
	{
		this.mensagem = mensagem;
		this.mensagemErro = mensagemErro;
	}

	private async Task OpenFile()
	{
		SetMensagem(string.Empty);
		try
		{
			await imagem.SetFileAsync((await fileReader.CreateReference(inputFile).EnumerateFilesAsync()).FirstOrDefault());
		}
		catch (Exception ex)
		{
			SetMensagem(ex.Message, true);
		}
	}

	public async Task<string> UploadFile()
	{
		MultipartFormDataContent content = new MultipartFormDataContent();
		content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");

		if (imagem.File == null)
		{
			if (imagem.Url != string.Empty)
				return imagem.Url;

			SetMensagem("Nenhum arquivo encontrado.", true);
			return string.Empty;
		}

		try
		{
			using (var fileStream = await imagem.File.CreateMemoryStreamAsync((int)imagem.Tamanho))
			{
				StreamContent sc = new StreamContent(fileStream, (int)fileStream.Length);

				content.Add(sc, "image", imagem.Nome);

				try
				{
					imagem.SetUrl(await uploader.Upload(content, Categoria));
					SetMensagem("Arquivo carregado com sucesso!");
					return imagem.Url;
				}
				catch (HttpResponseException ex)
				{
					SetMensagem($"{ex.Response.StatusCode.ToString()}", true);
				}
			}
		}
		catch (Exception ex)
		{
			SetMensagem($"{ex.Message}", true);
		}
		return string.Empty;
	}
}
