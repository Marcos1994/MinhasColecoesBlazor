@using System.IO
@using Tewr.Blazor.FileReader
@using MinhasColecoes.Client.Models
@inject IFileReaderService fileReader
@inject FileUploadApiService uploader


<div class="row mb-3" style="height: 200px;">
	<div class="col border border-dark rounded-3" style="height: 200px;">
		<div class="d-block position-relative" style="height: 200px;">
			@if (string.IsNullOrEmpty(imagem.Preview))
			{
				<img class="mx-auto d-block" style="max-width: 100%; max-height: 100%;" src="/img/fotos/Colecao/_foto_padrao.jpg" />
			}
			else
			{
				<button class="position-absolute end-0 top-0 text-danger bg-white rounded-bottom border-0" @onclick="imagem.Clear">
					<i class="bi-x-circle" title="Remover Imagem"
					   style="font-size: 20px; line-height: 20px;"></i>
				</button>
				<img class="mx-auto d-block" style="max-width: 100%; max-height: 100%;" src="@imagem.Preview" />
			}
		</div>
	</div>
</div>
<div class="row mb-3">
	<div class="form-group">
		<input type="file" @ref="inputFile" @onchange="async () => await OpenFile()" accept="image/*" />
	</div>
</div>
@if (!string.IsNullOrEmpty(mensagem))
{
	<div class="row mb-3">
		<div class="alert alert-danger">
			@mensagem
		</div>
		}
	</div>
}

@code {
	[Parameter]
	public EnumCategoriasFotos Categoria { get; set; }

	[Parameter]
	public string Url { get; set; } = string.Empty;

	ElementReference inputFile;
	ImageUploaderModel imagem;
	string mensagem = string.Empty;

	protected override void OnInitialized()
	{
		imagem = new ImageUploaderModel(Categoria, uploader.GetBaseUrl());
		if (Url != string.Empty)
			imagem.SetUrl(Url);
	}

	private async Task OpenFile()
	{
		mensagem = string.Empty;
		try
		{
			await imagem.SetFileAsync((await fileReader.CreateReference(inputFile).EnumerateFilesAsync()).FirstOrDefault());
		}
		catch (Exception ex)
		{
			mensagem = ex.Message;
		}
	}

	public async Task<string> UploadFile()
	{
		MultipartFormDataContent content = new MultipartFormDataContent();
		content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");

		if (imagem.File == null)
		{
			if (imagem.Url != string.Empty)
				return imagem.Url;

			mensagem = "Nenhum arquivo encontrado.";
			return string.Empty;
		}

		try
		{
			using (var fileStream = await imagem.File.CreateMemoryStreamAsync((int)imagem.Tamanho))
			{
				StreamContent sc = new StreamContent(fileStream, (int)fileStream.Length);

				content.Add(sc, "image", imagem.Nome);

				try
				{
					imagem.SetUrl(await uploader.Upload(content, Categoria));
					return imagem.Url;
				}
				catch (HttpResponseException ex)
				{
					mensagem = $"{ex.Response.StatusCode.ToString()}";
				}
			}
		}
		catch (Exception ex)
		{
			mensagem = $"{ex.Message}";
		}
		return string.Empty;
	}
}
